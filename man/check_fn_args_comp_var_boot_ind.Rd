% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ols-var.R
\name{check_fn_args_comp_var_boot_ind}
\alias{check_fn_args_comp_var_boot_ind}
\title{Assertion Checks for individual \code{\link{comp_var}} function bootstrap function inputs}
\usage{
check_fn_args_comp_var_boot_ind(inp_list, boot_type)
}
\arguments{
\item{inp_list}{(list) : A list containing the relevant input parameters for
empirical bootstrap (\code{\link{comp_boot_emp}}),
residual bootstrap (\code{\link{comp_boot_res}}), and
multiplier bootstrap (\code{\link{comp_boot_mul}}).
In the case of empirical bootstrap the expected input is of the form
\code{list(B = 10, m = 100)}. Here the named element \code{m} is optional
e.g. \code{list(B = 10)} is valid, or passed in as an explicit \code{NULL}
e.g. \code{list(B = 10, m = NULL)}. Note that technically \code{B, m}
should both be positive integers, but this assertion checking is handled
explicitly in the \code{\link{comp_boot_emp}} function. So although passing
in \code{list(B = -15, m = -20)} will pass this function without errors,
these will be addressed explicitly in \code{\link{comp_boot_emp}} as
invalid inputs.
In the case of residual bootstrap the expected input is of the form
\code{list(B = 10)}. Note that technically \code{B}
should be a positive integer, but this assertion checking is handled
explicitly in the \code{\link{comp_boot_res}} function. So although passing
in \code{list(B = -15)} will pass this function without errors,
these will be addressed explicitly in \code{\link{comp_boot_res}} as
invalid inputs.
In the case of multiplier bootstrap the expected input is of the form
\code{list(B = 10, weights_type = "rademacher")}. Here the named element
\code{weights_type} is optional e.g. \code{list(B = 10)} is valid,
or passed in as an explicit \code{NULL}
e.g. \code{list(B = 10, weights_type = NULL)}.
Note that technically \code{B} should be a positive integer, and
\code{weights_type} should be a character vector
(see \code{\link{comp_boot_mul}}), but this assertion checking is handled
explicitly in the \code{\link{comp_boot_mul}} function. So although passing
in \code{list(B = -15, m = "test")} will pass this function without errors,
these will be addressed explicitly in \code{\link{comp_boot_mul}} as
invalid inputs.}

\item{boot_type}{(character) : Can take one of the values
\code{c('boot_emp', 'boot_res', 'boot_mul')}, which are for empirical,
residual, and multiplier bootstrap respectively.}
}
\value{
: A \code{TRUE} if assertions pass, or an error if there is an
assertion failure.
}
\description{
\code{check_fn_args_comp_var_boot_ind} is used to assess whether the arguments
are correctly specified in \code{list} format and returns an error message if
they do not match the correct specification
}
\examples{
\dontrun{
# Multiplier Bootstrap input list assertion checking

# valid since the named arguments are B, weights_type
testthat::expect_true(check_fn_args_comp_var_boot_ind(
  inp_list = list(B = 10, weights_type = "rademacher"),
  boot_type = "boot_mul"
))

# valid since the named arguments are B, weights_type i.e. weights_type is NULL
testthat::expect_true(check_fn_args_comp_var_boot_ind(
  inp_list = list(B = 10, weights_type = NULL),
  boot_type = "boot_mul"
))
}
}
\keyword{internal}
