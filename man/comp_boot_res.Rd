% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ols-boot-residual.R
\name{comp_boot_res}
\alias{comp_boot_res}
\title{A wrapper for the residual bootstrap of a fitted OLS regression model}
\usage{
comp_boot_res(mod_fit, B = 100)
}
\arguments{
\item{mod_fit}{An object of class \code{\link[stats]{lm}} to fit on the data.
This object should contain the formula and the data.}

\item{B}{Bootstrap repetitions or number of bootstrap samples to be drawn.}
}
\value{
A list containing the following elements.
\code{var_type}: The type of estimator for the variance of the coefficients
estimates.
\code{var_summary}: A tibble containing the summary statistics for the model:
terms (\code{term}), standard errors (\code{std.error}),
statistics (\code{statistic}), p-values (\code{p.values}). The format
of the tibble is exactly identical to the one generated by
\code{\link[broom]{tidy}}, but the standard errors and p-values are computed
via the bootstrap.
\code{var_assumptions}: The assumptions under which the estimator of the
variance is consistent.
\code{cov_mat}: The covariance matrix of the coefficients estimates.
\code{boot_out}: A tibble of the model's coefficients estimated (\code{term} and
\code{estimate}) on the bootstrapped datasets,
the size of the original dataset (\code{n}), and the number of the
bootstrap repetition (\code{b}). In case of empirical bootstrap, it will
also contain the size of each bootstrapped dataset (\code{m}).
}
\description{
\code{comp_boot_res} is a wrapper for the empirical bootstrap of
a fitted \code{\link[stats]{lm}} model.
}
\details{
The residual bootstrap consists of fitting the chosen statistical
model (\code{mod_fit}) \code{B} times. Each of the \code{B} datasets
consists of the original independent variables and of dependent variable
given by the sum of the estimates of the original model and a
bootstrap versions of the residuals.
}
\examples{
\dontrun{
# Obtain estimates of the coefficients on bootstrapped versions of the dataset
set.seed(35542)
n <- 1e3
X <- stats::rnorm(n, 0, 1)
y <- 2 + X * 1 + stats::rnorm(n, 0, 1)
lm_fit <- stats::lm(y ~ X)
out <- comp_boot_res(lm_fit, B = 100)

print(out)
}
}
